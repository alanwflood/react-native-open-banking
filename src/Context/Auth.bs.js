// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Json from "@glennsl/bs-json/src/Json.bs.js";
import * as User from "../API/User.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as ReactNative from "react-native";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";

function mapUserLoginToAuth(loginStatus) {
  if (loginStatus.tag) {
    return /* LoggedOut */0;
  } else {
    return /* LoggedIn */[loginStatus[0]];
  }
}

function isLoggedIn(auth) {
  if (auth) {
    return true;
  } else {
    return false;
  }
}

var RetrieveUserError = Caml_exceptions.create("Auth.RetrieveUserError");

function currentUserOrRaise(auth) {
  if (auth) {
    return auth[0];
  } else {
    throw [
          RetrieveUserError,
          "Current User missing"
        ];
  }
}

function getCurrentUser(param) {
  return ReactNative.AsyncStorage.getItem("user").then((function (json) {
                  if (json !== null) {
                    return Promise.resolve(mapUserLoginToAuth(Curry._1(User.Login[/* Decode */0][/* user */1], Json.parseOrRaise(json))));
                  } else {
                    return Promise.resolve(/* LoggedOut */0);
                  }
                })).catch((function (_err) {
                throw [
                      RetrieveUserError,
                      "Could not get user from storage"
                    ];
              }));
}

function logOut(navigation) {
  ReactNative.AsyncStorage.clear().then((function (_result) {
          return Promise.resolve((navigation.navigate("SignIn"), /* () */0));
        }));
  return /* () */0;
}

var RetrieveTokenError = Caml_exceptions.create("Auth.RetrieveTokenError");

function getAuthToken(param) {
  return getCurrentUser(/* () */0).then((function (user) {
                return Promise.resolve(currentUserOrRaise(user)[/* token */0]);
              }));
}

var context = React.createContext(/* record */[/* auth : tuple */[
        /* LoggedOut */0,
        (function (param) {
            return /* () */0;
          })
      ]]);

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var make = context.Provider;

var Provider = /* module */[
  /* makeProps */makeProps,
  /* make */make
];

export {
  mapUserLoginToAuth ,
  isLoggedIn ,
  RetrieveUserError ,
  currentUserOrRaise ,
  getCurrentUser ,
  logOut ,
  RetrieveTokenError ,
  getAuthToken ,
  context ,
  Provider ,
  
}
/* context Not a pure module */
