// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as LoginAction from "./API/LoginAction.bs.js";
import * as ReactNative from "react-native";
import * as Style$ReactNative from "reason-react-native/src/apis/Style.bs.js";

var styles = ReactNative.StyleSheet.create({
      container: {
        backgroundColor: "#F5FCFF",
        alignItems: "center",
        flex: 1,
        justifyContent: "center"
      },
      textInput: {
        fontSize: 25,
        borderBottomWidth: 1,
        borderColor: "#CCCCCC",
        height: 50,
        marginTop: 15,
        paddingLeft: 20,
        paddingRight: 20,
        width: Style$ReactNative.pct(75)
      },
      errorText: {
        color: "#ff0033",
        marginTop: 15
      },
      submitButton: {
        backgroundColor: "#053CC8",
        marginTop: 25,
        width: Style$ReactNative.pct(75)
      }
    });

var initialState = /* record */[
  /* email */"",
  /* password */"",
  /* error */" "
];

function submitForm(email, password, dispatch) {
  LoginAction.login(email, password).then((function (result) {
          if (result.tag) {
            return Promise.resolve(Curry._1(dispatch, /* SetError */Block.__(2, [result[0][/* message */0]])));
          } else {
            return Promise.resolve((console.log(result[0]), /* () */0));
          }
        }));
  return /* () */0;
}

function App$app(Props) {
  var ref = React.useRef(null);
  var match = React.useReducer((function (param, action) {
          var error = param[/* error */2];
          var password = param[/* password */1];
          var email = param[/* email */0];
          switch (action.tag | 0) {
            case 0 : 
                return /* record */[
                        /* email */action[0],
                        /* password */password,
                        /* error */error
                      ];
            case 1 : 
                return /* record */[
                        /* email */email,
                        /* password */action[0],
                        /* error */error
                      ];
            case 2 : 
                return /* record */[
                        /* email */email,
                        /* password */password,
                        /* error */action[0]
                      ];
            
          }
        }), initialState);
  var dispatch = match[1];
  var match$1 = match[0];
  var password = match$1[/* password */1];
  var email = match$1[/* email */0];
  return React.createElement(ReactNative.View, {
              style: styles.container,
              children: null
            }, React.createElement(ReactNative.Text, {
                  children: "Sumi"
                }), React.createElement(ReactNative.TextInput, {
                  autoCapitalize: "none",
                  autoComplete: "email",
                  keyboardType: "email-address",
                  onChangeText: (function (text) {
                      return Curry._1(dispatch, /* SetEmail */Block.__(0, [text]));
                    }),
                  onSubmitEditing: (function (param) {
                      Belt_Option.map(Caml_option.nullable_to_opt(ref.current), (function (ref) {
                              return ref.focus();
                            }));
                      return /* () */0;
                    }),
                  placeholder: "Email",
                  returnKeyType: "next",
                  textContentType: "emailAddress",
                  value: email,
                  style: styles.textInput
                }), React.createElement(ReactNative.TextInput, {
                  ref: ref,
                  autoComplete: "password",
                  onChangeText: (function (text) {
                      return Curry._1(dispatch, /* SetPassword */Block.__(1, [text]));
                    }),
                  placeholder: "Password",
                  returnKeyType: "go",
                  secureTextEntry: true,
                  textContentType: "password",
                  value: password,
                  style: styles.textInput
                }), React.createElement(ReactNative.Text, {
                  style: styles.errorText,
                  children: match$1[/* error */2]
                }), React.createElement(ReactNative.View, {
                  style: styles.submitButton,
                  children: React.createElement(ReactNative.Button, {
                        accessibilityLabel: "Learn more about this purple button",
                        color: "#ffffff",
                        onPress: (function (param) {
                            return submitForm(email, password, dispatch);
                          }),
                        title: "Sign In"
                      })
                }));
}

var app = App$app;

export {
  styles ,
  initialState ,
  submitForm ,
  app ,
  
}
/* styles Not a pure module */
