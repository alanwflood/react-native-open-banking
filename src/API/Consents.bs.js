// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Auth from "../Context/Auth.bs.js";
import * as Fetch from "bs-fetch/src/Fetch.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Json_encode from "@glennsl/bs-json/src/Json_encode.bs.js";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";

function consentDecoder(json) {
  return /* record */[
          /* institutionId */Json_decode.field("institutionId", Json_decode.string, json),
          /* status */Json_decode.field("status", Json_decode.string, json)
        ];
}

function consentAccountDecoder(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.string, json),
          /* institutionId */Json_decode.field("institutionId", Json_decode.string, json),
          /* type_ */Json_decode.field("type", Json_decode.string, json),
          /* balance */Json_decode.field("balance", Json_decode.$$float, json),
          /* currency */Json_decode.field("currency", Json_decode.string, json)
        ];
}

function ammendResponseDecoder(json) {
  return /* record */[
          /* consents */Json_decode.field("consents", (function (param) {
                  return Json_decode.list(consentDecoder, param);
                }), json),
          /* accounts */Json_decode.field("accounts", (function (param) {
                  return Json_decode.list(consentAccountDecoder, param);
                }), json)
        ];
}

function postConsentAmmend(authToken, userUuid, institutionId, consentToken) {
  var payload = JSON.stringify(Json_encode.object_(/* :: */[
            /* tuple */[
              "userUuid",
              userUuid
            ],
            /* :: */[
              /* tuple */[
                "institutionId",
                institutionId
              ],
              /* :: */[
                /* tuple */[
                  "consentToken",
                  consentToken
                ],
                /* :: */[
                  /* tuple */[
                    "preselection",
                    institutionId !== "bbva-sandbox"
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]));
  return fetch("http://localhost:8080/api/consent/", Fetch.RequestInit[/* make */0](/* Post */2, {
                    "Content-Type": "application/json",
                    "x-auth-token": authToken
                  }, Caml_option.some(payload), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0));
}

function getConsents(authToken) {
  return fetch("http://localhost:8080/api/consents/", Fetch.RequestInit[/* make */0](/* Get */0, {
                    "Content-Type": "application/json",
                    "x-auth-token": authToken
                  }, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0));
}

var AmmendRequestError = Caml_exceptions.create("Consents.AmmendRequestError");

function ammend(userUuid, institutionId, consentToken) {
  var request = function (param) {
    return postConsentAmmend(param, userUuid, institutionId, consentToken);
  };
  return Auth.getAuthToken(/* () */0).then(request).then((function (prim) {
                    return prim.json();
                  })).then((function (json) {
                  console.log(json);
                  return Promise.resolve(ammendResponseDecoder(json));
                })).catch((function (err) {
                console.log(err);
                return Promise.reject([
                            AmmendRequestError,
                            "Failed to ammend consent for institution"
                          ]);
              }));
}

function get(param) {
  return Auth.getAuthToken(/* () */0).then(getConsents).then((function (prim) {
                  return prim.json();
                })).then((function (json) {
                return Promise.resolve(Json_decode.field("consents", (function (param) {
                                  return Json_decode.list(consentDecoder, param);
                                }), json));
              }));
}

export {
  consentDecoder ,
  consentAccountDecoder ,
  ammendResponseDecoder ,
  postConsentAmmend ,
  getConsents ,
  AmmendRequestError ,
  ammend ,
  get ,
  
}
/* Auth Not a pure module */
