// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Fetch from "bs-fetch/src/Fetch.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";

function decodeUser(json) {
  return /* Success */Block.__(0, [/* record */[
              /* createdDate */Json_decode.field("createdDate", (function (param) {
                      return Json_decode.map((function (prim) {
                                    return new Date(prim);
                                  }), Json_decode.$$float, param);
                    }), json),
              /* name */Json_decode.field("name", Json_decode.string, json),
              /* id */Json_decode.field("id", Json_decode.$$int, json),
              /* uuid */Json_decode.field("uuid", Json_decode.string, json),
              /* email */Json_decode.field("email", Json_decode.string, json)
            ]]);
}

function decodeError(json) {
  return /* Fail */Block.__(1, [/* record */[/* message */Json_decode.field("message", Json_decode.string, json)]]);
}

function decodeLogin(json) {
  return Json_decode.either(decodeUser, decodeError)(json);
}

function decodeFetchError(_error) {
  return /* Fail */Block.__(1, [/* record */[/* message */(_error.message)]]);
}

function loginRequest(email, password) {
  var payload = { };
  payload["email"] = email;
  payload["password"] = password;
  return fetch("http://localhost:8080/api/authentications", Fetch.RequestInit[/* make */0](/* Post */2, {
                    "Content-Type": "application/json"
                  }, Caml_option.some(JSON.stringify(payload)), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0));
}

function login(email, password) {
  return loginRequest(email, password).then((function (prim) {
                    return prim.json();
                  })).then((function (json) {
                  return Promise.resolve(Json_decode.either(decodeUser, decodeError)(json));
                })).catch((function (error) {
                return Promise.resolve(decodeFetchError(error));
              }));
}

export {
  decodeUser ,
  decodeError ,
  decodeLogin ,
  decodeFetchError ,
  loginRequest ,
  login ,
  
}
/* No side effect */
