// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Fetch from "bs-fetch/src/Fetch.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as Json_encode from "@glennsl/bs-json/src/Json_encode.bs.js";
import * as ReactNative from "react-native";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";

function errorMessageDecoder(message) {
  switch (message) {
    case "Email address should be valid" : 
        return /* InvalidEmail */2;
    case "Network request failed" : 
        return /* NetworkFailure */0;
    case "Submitted credentials are incorrect" : 
        return /* InvalidCredentials */1;
    default:
      return /* UnknownError */[message];
  }
}

function decodeUser(json) {
  return /* Success */Block.__(0, [/* record */[
              /* createdDate */Json_decode.field("createdDate", (function (param) {
                      return Json_decode.map((function (prim) {
                                    return new Date(prim);
                                  }), Json_decode.$$float, param);
                    }), json),
              /* name */Json_decode.field("name", Json_decode.string, json),
              /* id */Json_decode.field("id", Json_decode.$$int, json),
              /* uuid */Json_decode.field("uuid", Json_decode.string, json),
              /* email */Json_decode.field("email", Json_decode.string, json)
            ]]);
}

function decodeError(json) {
  return /* Fail */Block.__(1, [Json_decode.field("message", (function (param) {
                    return Json_decode.map(errorMessageDecoder, Json_decode.string, param);
                  }), json)]);
}

function decodeLogin(json) {
  return Json_decode.either(decodeUser, decodeError)(json);
}

function decodeFetchError(_error) {
  return /* Fail */Block.__(1, [errorMessageDecoder((_error.message))]);
}

function loginRequest(email, password) {
  var payload = JSON.stringify(Json_encode.object_(/* :: */[
            /* tuple */[
              "email",
              email
            ],
            /* :: */[
              /* tuple */[
                "password",
                password
              ],
              /* [] */0
            ]
          ]));
  return fetch("http://localhost:8080/api/authentications", Fetch.RequestInit[/* make */0](/* Post */2, {
                    "Content-Type": "application/json"
                  }, Caml_option.some(payload), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0));
}

var NoAuthToken = Caml_exceptions.create("User.Login.NoAuthToken");

function getAuthToken(response) {
  var match = response.headers.get("x-auth-token");
  if (match !== null) {
    return match;
  } else {
    throw [
          NoAuthToken,
          "No auth token found in server response"
        ];
  }
}

function storeLoginDetails(user, authToken) {
  Promise.resolve(ReactNative.AsyncStorage.multiSet(/* array */[
            /* tuple */[
              "user",
              user
            ],
            /* tuple */[
              "authToken",
              authToken
            ]
          ]));
  return /* () */0;
}

var Login = /* module */[
  /* errorMessageDecoder */errorMessageDecoder,
  /* decodeUser */decodeUser,
  /* decodeError */decodeError,
  /* decodeLogin */decodeLogin,
  /* decodeFetchError */decodeFetchError,
  /* loginRequest */loginRequest,
  /* NoAuthToken */NoAuthToken,
  /* getAuthToken */getAuthToken,
  /* storeLoginDetails */storeLoginDetails
];

function login(email, password) {
  var authToken = /* record */[/* contents */""];
  return loginRequest(email, password).then((function (response) {
                    authToken[0] = getAuthToken(response);
                    return response.json();
                  })).then((function (json) {
                  var user = Json_decode.either(decodeUser, decodeError)(json);
                  storeLoginDetails(JSON.stringify(json), authToken[0]);
                  return Promise.resolve(user);
                })).catch((function (error) {
                return Promise.resolve(decodeFetchError(error));
              }));
}

export {
  Login ,
  login ,
  
}
/* react-native Not a pure module */
